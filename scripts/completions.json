{ "trigger": "remove\tfurnace", "contents": "furnace.remove(output, optionalInput);" },
{ "trigger": "addRecipe\tfurnace", "contents": "furnace.addRecipe(output, input, optionalXp);" },
{ "trigger": "setFuel\tfurnace", "contents": "furnace.setFuel(item, fuel);" },
{ "trigger": "addShaped\trecipes", "contents": "recipes.addShaped(output, ingredients, optionalFunction, optionalAction);" },
{ "trigger": "addShapedMirrored\trecipes", "contents": "recipes.addShapedMirrored(output, ingredients, optionalFunction, optionalAction);" },
{ "trigger": "addShapeless\trecipes", "contents": "recipes.addShapeless(output, ingredients, optionalFunction, optionalAction);" },
{ "trigger": "addRecipe\tmods.actuallyadditions.AtomicReconstructor", "contents": "mods.actuallyadditions.AtomicReconstructor.addRecipe(input, output, energyUse);" },
{ "trigger": "remove\tmods.actuallyadditions.AtomicReconstructor", "contents": "mods.actuallyadditions.AtomicReconstructor.remove(output);" },
{ "trigger": "addRecipe\tmods.actuallyadditions.Coffee", "contents": "mods.actuallyadditions.Coffee.addRecipe(ingredient, maxAmplifier, effectStrings, effectDurations);" },
{ "trigger": "remove\tmods.actuallyadditions.Coffee", "contents": "mods.actuallyadditions.Coffee.remove(input);" },
{ "trigger": "addRecipe\tmods.actuallyadditions.Compost", "contents": "mods.actuallyadditions.Compost.addRecipe(output);" },
{ "trigger": "addRecipe\tmods.actuallyadditions.Compost", "contents": "mods.actuallyadditions.Compost.addRecipe(input, displayInput, output, displayOutput);" },
{ "trigger": "remove\tmods.actuallyadditions.Compost", "contents": "mods.actuallyadditions.Compost.remove(input);" },
{ "trigger": "addRecipe\tmods.actuallyadditions.Crusher", "contents": "mods.actuallyadditions.Crusher.addRecipe(input, outputOne, optionalOutputtwo, optionalOutputtwochance);" },
{ "trigger": "remove\tmods.actuallyadditions.Crusher", "contents": "mods.actuallyadditions.Crusher.remove(input);" },
{ "trigger": "remove\tmods.actuallyadditions.Empowerer", "contents": "mods.actuallyadditions.Empowerer.remove(input, output);" },
{ "trigger": "addRecipe\tmods.appeng.Grinder", "contents": "mods.appeng.Grinder.addRecipe(outputs, inputStack, turns);" },
{ "trigger": "addRecipe\tmods.appeng.Grinder", "contents": "mods.appeng.Grinder.addRecipe(outputStack, inputStack, optionalOutputstack2, optionalOutputstack2chance, optionalOutputstack3, optionalOutputstack3chance, inputEnergy);" },
{ "trigger": "addRecipe\tmods.appeng.Grinder", "contents": "mods.appeng.Grinder.addRecipe(input, output, energy, optionalOutput2, optionalChance2, optionalOutput3, optionalChance3);" },
{ "trigger": "removeRecipe\tmods.appeng.Grinder", "contents": "mods.appeng.Grinder.removeRecipe(input);" },
{ "trigger": "addRecipe\tmods.appeng.Inscriber", "contents": "mods.appeng.Inscriber.addRecipe(outputStack, inputArray, inputStackPlateA, inputStackPlateB, typeString);" },
{ "trigger": "addRecipe\tmods.appeng.Inscriber", "contents": "mods.appeng.Inscriber.addRecipe(imprintable, plateA, plateB, out, type);" },
{ "trigger": "removeRecipe\tmods.appeng.Inscriber", "contents": "mods.appeng.Inscriber.removeRecipe(outputStack);" },
{ "trigger": "addRecipe\tmods.bloodmagic.AlchemyTable", "contents": "mods.bloodmagic.AlchemyTable.addRecipe(output, lpDrained, ticksRequired, tierRequired, input);" },
{ "trigger": "removeRecipe\tmods.bloodmagic.AlchemyTable", "contents": "mods.bloodmagic.AlchemyTable.removeRecipe(output);" },
{ "trigger": "addRecipe\tmods.bloodmagic.Altar", "contents": "mods.bloodmagic.Altar.addRecipe(output, minTier, syphon, consumeRate, drainRate, input);" },
{ "trigger": "removeRecipe\tmods.bloodmagic.Altar", "contents": "mods.bloodmagic.Altar.removeRecipe(output);" },
{ "trigger": "addRecipe\tmods.bloodmagic.SoulForge", "contents": "mods.bloodmagic.SoulForge.addRecipe(output, minimumSouls, drain, input);" },
{ "trigger": "removeRecipe\tmods.bloodmagic.SoulForge", "contents": "mods.bloodmagic.SoulForge.removeRecipe(output);" },
{ "trigger": "addRecipe\tmods.botania.Apothecary", "contents": "mods.botania.Apothecary.addRecipe(output, input);" },
{ "trigger": "addRecipe\tmods.botania.Apothecary", "contents": "mods.botania.Apothecary.addRecipe(output, input);" },
{ "trigger": "removeRecipe\tmods.botania.Apothecary", "contents": "mods.botania.Apothecary.removeRecipe(output);" },
{ "trigger": "removeRecipe\tmods.botania.Apothecary", "contents": "mods.botania.Apothecary.removeRecipe(output);" },
{ "trigger": "addRecipe\tmods.botania.Brew", "contents": "mods.botania.Brew.addRecipe(inputItems, brewName);" },
{ "trigger": "removeRecipe\tmods.botania.Brew", "contents": "mods.botania.Brew.removeRecipe(brewName);" },
{ "trigger": "addRecipe\tmods.botania.ElvenTrade", "contents": "mods.botania.ElvenTrade.addRecipe(outputs, input);" },
{ "trigger": "removeRecipe\tmods.botania.ElvenTrade", "contents": "mods.botania.ElvenTrade.removeRecipe(output);" },
{ "trigger": "addBrewPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addBrewPage(name, entry, page_number, brew, recipe, bottomText);" },
{ "trigger": "addCraftingPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addCraftingPage(name, entry, page_number, outputs, inputs);" },
{ "trigger": "addElvenPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addElvenPage(name, entry, page_number, outputs, inputs);" },
{ "trigger": "addEntityPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addEntityPage(name, entry, page_number, entity, size);" },
{ "trigger": "addImagePage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addImagePage(name, entry, page_number, resource);" },
{ "trigger": "addLorePage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addLorePage(name, entry, page_number);" },
{ "trigger": "addInfusionPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addInfusionPage(name, entry, page_number, outputs, inputs, mana);" },
{ "trigger": "addAlchemyPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addAlchemyPage(name, entry, page_number, outputs, inputs, mana);" },
{ "trigger": "addConjurationPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addConjurationPage(name, entry, page_number, outputs, inputs, mana);" },
{ "trigger": "addPetalPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addPetalPage(name, entry, page_number, outputs, inputs);" },
{ "trigger": "addRunePage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addRunePage(name, entry, page_number, outputs, inputs, mana);" },
{ "trigger": "addTextPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addTextPage(name, entry, page_number);" },
{ "trigger": "removePage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.removePage(entry, page_number);" },
{ "trigger": "addEntry\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addEntry(entry, catagory, stack);" },
{ "trigger": "removeEntry\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.removeEntry(entry);" },
{ "trigger": "setEntryKnowledgeType\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.setEntryKnowledgeType(entry, knowledgeType);" },
{ "trigger": "addCategory\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addCategory(name);" },
{ "trigger": "removeCategory\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.removeCategory(name);" },
{ "trigger": "setCategoryPriority\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.setCategoryPriority(name, priority);" },
{ "trigger": "setCategoryIcon\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.setCategoryIcon(name, icon);" },
{ "trigger": "addRecipeMapping\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addRecipeMapping(stack, Entry, page);" },
{ "trigger": "removeRecipeMapping\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.removeRecipeMapping(stack);" },
{ "trigger": "addInfusion\tmods.botania.ManaInfusion", "contents": "mods.botania.ManaInfusion.addInfusion(output, input, mana);" },
{ "trigger": "addAlchemy\tmods.botania.ManaInfusion", "contents": "mods.botania.ManaInfusion.addAlchemy(output, input, mana);" },
{ "trigger": "addConjuration\tmods.botania.ManaInfusion", "contents": "mods.botania.ManaInfusion.addConjuration(output, input, mana);" },
{ "trigger": "removeRecipe\tmods.botania.ManaInfusion", "contents": "mods.botania.ManaInfusion.removeRecipe(output);" },
{ "trigger": "addOre\tmods.botania.Orechid", "contents": "mods.botania.Orechid.addOre(oreDict, weight);" },
{ "trigger": "addOre\tmods.botania.Orechid", "contents": "mods.botania.Orechid.addOre(oreDict, weight);" },
{ "trigger": "removeOre\tmods.botania.Orechid", "contents": "mods.botania.Orechid.removeOre(oreDict);" },
{ "trigger": "removeOre\tmods.botania.Orechid", "contents": "mods.botania.Orechid.removeOre(oreDict);" },
{ "trigger": "addRecipe\tmods.botania.PureDaisy", "contents": "mods.botania.PureDaisy.addRecipe(blockInput, blockOutput);" },
{ "trigger": "removeRecipe\tmods.botania.PureDaisy", "contents": "mods.botania.PureDaisy.removeRecipe(output);" },
{ "trigger": "addRecipe\tmods.botania.RuneAltar", "contents": "mods.botania.RuneAltar.addRecipe(output, input, mana);" },
{ "trigger": "removeRecipe\tmods.botania.RuneAltar", "contents": "mods.botania.RuneAltar.removeRecipe(output);" },
{ "trigger": "addVariation\tmods.chisel.Groups", "contents": "mods.chisel.Groups.addVariation(groupName, stack);" },
{ "trigger": "removeVariation\tmods.chisel.Groups", "contents": "mods.chisel.Groups.removeVariation(stack);" },
{ "trigger": "addGroup\tmods.chisel.Groups", "contents": "mods.chisel.Groups.addGroup(groupName);" },
{ "trigger": "removeGroup\tmods.chisel.Groups", "contents": "mods.chisel.Groups.removeGroup(groupName);" },
{ "trigger": "addRecipe\tmods.embers.Melter", "contents": "mods.embers.Melter.addRecipe(input, outputOne, matchMeta, matchNBT);" },
{ "trigger": "addOreRecipe\tmods.embers.Melter", "contents": "mods.embers.Melter.addOreRecipe(key, outputOne, matchMeta, matchNBT);" },
{ "trigger": "remove\tmods.embers.Melter", "contents": "mods.embers.Melter.remove(fluid);" },
{ "trigger": "addRecipe\tmods.embers.Mixer", "contents": "mods.embers.Mixer.addRecipe(input1, input2, input3, input4, output);" },
{ "trigger": "remove\tmods.embers.Mixer", "contents": "mods.embers.Mixer.remove(output);" },
{ "trigger": "addRecipe\tmods.embers.Stamper", "contents": "mods.embers.Stamper.addRecipe(itemInput, fluidInput, stampType, result, matchMeta, matchNBT);" },
{ "trigger": "addRecipe\tmods.embers.Stamper", "contents": "mods.embers.Stamper.addRecipe(key, fluidInput, stampType, result);" },
{ "trigger": "remove\tmods.embers.Stamper", "contents": "mods.embers.Stamper.remove(item);" },
{ "trigger": "add\tmods.extrautils.Resonator", "contents": "mods.extrautils.Resonator.add(output, input, energy, addOwnerTag);" },
{ "trigger": "remove\tmods.extrautils.Resonator", "contents": "mods.extrautils.Resonator.remove(output);" },
{ "trigger": "addRecipe\tmods.forestry.Carpenter", "contents": "mods.forestry.Carpenter.addRecipe(output, ingredients, packagingTime, optionalFluidinput, optionalBox, optionalRemainingitems);" },
{ "trigger": "removeRecipe\tmods.forestry.Carpenter", "contents": "mods.forestry.Carpenter.removeRecipe(output, optionalFluidinput);" },
{ "trigger": "addRecipe\tmods.forestry.Centrifuge", "contents": "mods.forestry.Centrifuge.addRecipe(output, ingredients, packagingTime);" },
{ "trigger": "removeRecipe\tmods.forestry.Centrifuge", "contents": "mods.forestry.Centrifuge.removeRecipe(input);" },
{ "trigger": "addRecipe\tmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.addRecipe(fluidOutput, resource, fluidInput, fermentationValue, fluidOutputModifier);" },
{ "trigger": "removeRecipe\tmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.removeRecipe(input);" },
{ "trigger": "addFuel\tmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.addFuel(item, fermentPerCycle, burnDuration);" },
{ "trigger": "removeFuel\tmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.removeFuel(fermenterItem);" },
{ "trigger": "addRecipe\tmods.forestry.Moistener", "contents": "mods.forestry.Moistener.addRecipe(output, input, packagingTime);" },
{ "trigger": "removeRecipe\tmods.forestry.Moistener", "contents": "mods.forestry.Moistener.removeRecipe(output);" },
{ "trigger": "addFuel\tmods.forestry.Moistener", "contents": "mods.forestry.Moistener.addFuel(item, product, moistenerValue, stage);" },
{ "trigger": "removeFuel\tmods.forestry.Moistener", "contents": "mods.forestry.Moistener.removeFuel(moistenerItem);" },
{ "trigger": "addRecipe\tmods.forestry.Squeezer", "contents": "mods.forestry.Squeezer.addRecipe(fluidOutput, ingredients, timePerItem, optionalItemoutput);" },
{ "trigger": "removeRecipe\tmods.forestry.Squeezer", "contents": "mods.forestry.Squeezer.removeRecipe(liquid, optionalIngredients);" },
{ "trigger": "addRecipe\tmods.forestry.Still", "contents": "mods.forestry.Still.addRecipe(fluidOutput, fluidInput, timePerUnit);" },
{ "trigger": "removeRecipe\tmods.forestry.Still", "contents": "mods.forestry.Still.removeRecipe(output, optionalFluidinput);" },
{ "trigger": "addSmelting\tmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.addSmelting(fluidOutput, itemInput, meltingPoint);" },
{ "trigger": "addCast\tmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.addCast(output, ingredients, fluidInput, optionalPlan, optionalRemainingitems);" },
{ "trigger": "removeSmelting\tmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.removeSmelting(itemInput);" },
{ "trigger": "removeCast\tmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.removeCast(product);" },
{ "trigger": "add\tmods.randomthings.ImbuingStation", "contents": "mods.randomthings.ImbuingStation.add(output, input, ingredient1, ingredient2, ingredient3);" },
{ "trigger": "remove\tmods.randomthings.ImbuingStation", "contents": "mods.randomthings.ImbuingStation.remove(output);" },
{ "trigger": "add\tmods.refinedstorage.Solderer", "contents": "mods.refinedstorage.Solderer.add(output, time, row2);" },
{ "trigger": "add\tmods.refinedstorage.Solderer", "contents": "mods.refinedstorage.Solderer.add(output, time, row1, row2, optionalRow3);" },
{ "trigger": "remove\tmods.refinedstorage.Solderer", "contents": "mods.refinedstorage.Solderer.remove(output);" },
{ "trigger": "addBasinRecipe\tmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.addBasinRecipe(output, liquid, optionalCast, optionalConsumecast, optionalTimeinticks);" },
{ "trigger": "addTableRecipe\tmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.addTableRecipe(output, liquid, optionalCast, optionalConsumecast, optionalTimeinticks);" },
{ "trigger": "removeTableRecipe\tmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.removeTableRecipe(output, optionalLiquid, optionalCast);" },
{ "trigger": "removeBasinRecipe\tmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.removeBasinRecipe(output, optionalLiquid, optionalCast);" },
{ "trigger": "addRecipe\tmods.tconstruct.Drying", "contents": "mods.tconstruct.Drying.addRecipe(input, output, time);" },
{ "trigger": "removeRecipe\tmods.tconstruct.Drying", "contents": "mods.tconstruct.Drying.removeRecipe(ingredient);" },
{ "trigger": "remove\tmods.tconstruct.Modifiers", "contents": "mods.tconstruct.Modifiers.remove(mod);" },
{ "trigger": "addAlloy\tmods.tconstruct.Smeltery", "contents": "mods.tconstruct.Smeltery.addAlloy(output, input);" },
{ "trigger": "removeAlloy\tmods.tconstruct.Smeltery", "contents": "mods.tconstruct.Smeltery.removeAlloy(output);" },
{ "trigger": "addMelting\tmods.tconstruct.Smeltery", "contents": "mods.tconstruct.Smeltery.addMelting(output, input, temp, optionalBlock);" },
{ "trigger": "removeMelting\tmods.tconstruct.Smeltery", "contents": "mods.tconstruct.Smeltery.removeMelting(input);" },
{ "trigger": "addFuel\tmods.tconstruct.Smeltery", "contents": "mods.tconstruct.Smeltery.addFuel(liquid);" },
{ "trigger": "removeFuel\tmods.tconstruct.Smeltery", "contents": "mods.tconstruct.Smeltery.removeFuel(input);" },
